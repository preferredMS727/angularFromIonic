/**
 * FS-OCR Api
 * The API Backend for the FS-OCR App.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs';

import {Asset} from '../model/asset';
import {ErrorObj} from '../model/errorObj';
import {FileInformation} from '../model/fileInformation';
import {Playlist} from '../model/playlist';
import {PlaylistMatrix} from '../model/playlistMatrix';
import {Token} from '../model/token';
import {User} from '../model/user';
import {Webhook} from '../model/webhook';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'https://dev-as-fsocr-fs-0001.azurewebsites.net/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Sends an error report.
     * 
     * @param error 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public errorPost(error?: ErrorObj, observe?: 'body', reportProgress?: boolean): Observable<ErrorObj>;
    public errorPost(error?: ErrorObj, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ErrorObj>>;
    public errorPost(error?: ErrorObj, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ErrorObj>>;
    public errorPost(error?: ErrorObj, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ErrorObj>(`${this.basePath}/error`,
            error,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Authorizes the given login. And response with a temporary token.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public oauth2AuthGet(observe?: 'body', reportProgress?: boolean): Observable<Token>;
    public oauth2AuthGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Token>>;
    public oauth2AuthGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Token>>;
    public oauth2AuthGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Token>(`${this.basePath}/oauth2/auth`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Refreshes the given token
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public oauth2RefreshGet(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public oauth2RefreshGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public oauth2RefreshGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public oauth2RefreshGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/oauth2/refresh`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Revokes the token.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public oauth2RevokeGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public oauth2RevokeGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public oauth2RevokeGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public oauth2RevokeGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/oauth2/revoke`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of users with general information.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersGet(observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public usersGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public usersGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public usersGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new user.
     * 
     * @param userObj 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersPost(userObj?: User, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public usersPost(userObj?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public usersPost(userObj?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public usersPost(userObj?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<User>(`${this.basePath}/users`,
            userObj,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Requests a link for password reset.
     * 
     * @param mail 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersResetPasswordGet(mail?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public usersResetPasswordGet(mail?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public usersResetPasswordGet(mail?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public usersResetPasswordGet(mail?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (mail !== undefined && mail !== null) {
            queryParameters = queryParameters.set('mail', <any>mail);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/users/reset_password`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes the given asset.
     * 
     * @param userId The user ID.
     * @param assetId The ID of the asset to return.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdAssetsAssetIdDelete(userId: number, assetId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public usersUserIdAssetsAssetIdDelete(userId: number, assetId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public usersUserIdAssetsAssetIdDelete(userId: number, assetId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public usersUserIdAssetsAssetIdDelete(userId: number, assetId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdAssetsAssetIdDelete.');
        }

        if (assetId === null || assetId === undefined) {
            throw new Error('Required parameter assetId was null or undefined when calling usersUserIdAssetsAssetIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/assets/${encodeURIComponent(String(assetId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get File Information for Download.
     * 
     * @param userId The user ID.
     * @param assetId The ID of the asset to return.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdAssetsAssetIdFileGet(userId: number, assetId: number, observe?: 'body', reportProgress?: boolean): Observable<FileInformation>;
    public usersUserIdAssetsAssetIdFileGet(userId: number, assetId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileInformation>>;
    public usersUserIdAssetsAssetIdFileGet(userId: number, assetId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileInformation>>;
    public usersUserIdAssetsAssetIdFileGet(userId: number, assetId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdAssetsAssetIdFileGet.');
        }

        if (assetId === null || assetId === undefined) {
            throw new Error('Required parameter assetId was null or undefined when calling usersUserIdAssetsAssetIdFileGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<FileInformation>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/assets/${encodeURIComponent(String(assetId))}/file`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Uploads the Asset Image.
     * 
     * @param userId The user ID.
     * @param assetId The ID of the asset to return.
     * @param upfile The file to upload.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdAssetsAssetIdFilePost(userId: number, assetId: number, upfile: Blob, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public usersUserIdAssetsAssetIdFilePost(userId: number, assetId: number, upfile: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public usersUserIdAssetsAssetIdFilePost(userId: number, assetId: number, upfile: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public usersUserIdAssetsAssetIdFilePost(userId: number, assetId: number, upfile: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdAssetsAssetIdFilePost.');
        }

        if (assetId === null || assetId === undefined) {
            throw new Error('Required parameter assetId was null or undefined when calling usersUserIdAssetsAssetIdFilePost.');
        }

        if (upfile === null || upfile === undefined) {
            throw new Error('Required parameter upfile was null or undefined when calling usersUserIdAssetsAssetIdFilePost.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (upfile !== undefined) {
            formParams.append('upfile', <any>upfile);
        }

        return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/assets/${encodeURIComponent(String(assetId))}/file`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns an asset by ID.
     * 
     * @param userId The user ID.
     * @param assetId The ID of the asset to return.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdAssetsAssetIdGet(userId: number, assetId: number, observe?: 'body', reportProgress?: boolean): Observable<Asset>;
    public usersUserIdAssetsAssetIdGet(userId: number, assetId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Asset>>;
    public usersUserIdAssetsAssetIdGet(userId: number, assetId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Asset>>;
    public usersUserIdAssetsAssetIdGet(userId: number, assetId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdAssetsAssetIdGet.');
        }

        if (assetId === null || assetId === undefined) {
            throw new Error('Required parameter assetId was null or undefined when calling usersUserIdAssetsAssetIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Asset>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/assets/${encodeURIComponent(String(assetId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the information for the defined user and asset.
     * 
     * @param userId The user ID.
     * @param assetId The ID of the asset to return.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdAssetsAssetIdPlaylistGet(userId: number, assetId: number, observe?: 'body', reportProgress?: boolean): Observable<Playlist>;
    public usersUserIdAssetsAssetIdPlaylistGet(userId: number, assetId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Playlist>>;
    public usersUserIdAssetsAssetIdPlaylistGet(userId: number, assetId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Playlist>>;
    public usersUserIdAssetsAssetIdPlaylistGet(userId: number, assetId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdAssetsAssetIdPlaylistGet.');
        }

        if (assetId === null || assetId === undefined) {
            throw new Error('Required parameter assetId was null or undefined when calling usersUserIdAssetsAssetIdPlaylistGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Playlist>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/assets/${encodeURIComponent(String(assetId))}/playlist`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of insurances of the specified user.
     * 
     * @param userId The user ID.
     * @param type Type of Asset. Can be Gesetzliche, Betriebliche, Riester, Aktien, Rente or Sonstige.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdAssetsGet(userId: number, type?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Asset>>;
    public usersUserIdAssetsGet(userId: number, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Asset>>>;
    public usersUserIdAssetsGet(userId: number, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Asset>>>;
    public usersUserIdAssetsGet(userId: number, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdAssetsGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Asset>>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/assets`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates an asset for the logged in user.
     * 
     * @param userId The user ID.
     * @param insurance 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdAssetsPost(userId: number, insurance?: Asset, observe?: 'body', reportProgress?: boolean): Observable<Asset>;
    public usersUserIdAssetsPost(userId: number, insurance?: Asset, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Asset>>;
    public usersUserIdAssetsPost(userId: number, insurance?: Asset, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Asset>>;
    public usersUserIdAssetsPost(userId: number, insurance?: Asset, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdAssetsPost.');
        }


        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Asset>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/assets`,
            insurance,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns an user by ID.
     * 
     * @param userId The user ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdGet(userId: number, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public usersUserIdGet(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public usersUserIdGet(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public usersUserIdGet(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<User>(`${this.basePath}/users/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the matrix for playlist calculation.
     * 
     * @param userId The user ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdPlaylistmatrixGet(userId: number, observe?: 'body', reportProgress?: boolean): Observable<PlaylistMatrix>;
    public usersUserIdPlaylistmatrixGet(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlaylistMatrix>>;
    public usersUserIdPlaylistmatrixGet(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlaylistMatrix>>;
    public usersUserIdPlaylistmatrixGet(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdPlaylistmatrixGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<PlaylistMatrix>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/playlistmatrix`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the user object.
     * 
     * @param userId The user ID.
     * @param userObj 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdPut(userId: number, userObj?: User, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public usersUserIdPut(userId: number, userObj?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public usersUserIdPut(userId: number, userObj?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public usersUserIdPut(userId: number, userObj?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<string>(`${this.basePath}/users/${encodeURIComponent(String(userId))}`,
            userObj,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a new password for the user.
     * 
     * @param userId The user ID.
     * @param userObj 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersUserIdResetPasswordPost(userId: number, userObj?: User, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public usersUserIdResetPasswordPost(userId: number, userObj?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public usersUserIdResetPasswordPost(userId: number, userObj?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public usersUserIdResetPasswordPost(userId: number, userObj?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdResetPasswordPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/reset_password`,
            userObj,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the minimum client version
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public versionGet(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public versionGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public versionGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public versionGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/version`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webhook1Head(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public webhook1Head(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public webhook1Head(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public webhook1Head(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.head<any>(`${this.basePath}/webhook/1`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Receives a webhook from Surveymonkey
     * 
     * @param obj 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webhook1Post(obj?: Webhook, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public webhook1Post(obj?: Webhook, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public webhook1Post(obj?: Webhook, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public webhook1Post(obj?: Webhook, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/webhook/1`,
            obj,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
